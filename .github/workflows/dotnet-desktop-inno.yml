name: .NET Core Desktop Inno Setup

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  
    
    env:
      Solution_Name: Tests/Tests.sln
      Test_Project_Path: Tests/the_tester/the_tester.csproj
      INNOSETUP_SCRIPT: "C:/Users/rhoadg/Documents/GitHub/greg-leg/test-setup.iss"
      OUTPUT_DIR: "C:/Users/rhoadg/Documents/GitHub/greg-leg"

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      id: msbuildconfig
      uses: microsoft/setup-msbuild@v1.0.2

    # get location of MSBuild.exe
    - name: MSBUILD path
      run: echo ${{ steps.msbuildconfig.outputs.msbuildPath }}

    #Debug PATH
    - name: Debug PATH
      run: echo $PATH

    # Change the working directory to the correct path
    - name: Change to test project directory
      run: cd Tests/the_tester

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Execute all unit tests in the solution
    - name: Execute unit test
      run: dotnet test --configuration ${{ matrix.configuration }} $env:Test_Project_Path 
       
    - name: Build and Publish
      run: dotnet publish --configuration Release --output ${{ github.workspace }}/publish
      working-directory: Tests/the_tester

    - name: Install Invoke-MSBuild module
      run: Install-Module -Name Invoke-MSBuild -Force -AllowClobber -Scope CurrentUser

    - name: Run PowerShell script
      shell: pwsh
      run: .\the-testerScript.ps1 -Verbose
      working-directory: ${{ github.workspace }}

    - name: Save Workspace as Backup in Repo
      run: |
        mkdir backup_folder
        cp -r ${{ github.workspace }}/publish* backup_folder/
        git config --global user.name "grhoads172"
        git config --global user.email "gina.rhoads@devilbisshc.com"
        git checkout -b backup
        git add backup_folder/
        git commit -m "Backup specific folder contents"
        git push origin backup
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Save Workspace as Artifact
      uses: actions/upload-artifact@v2
      with:
        name: updated-repo
        path: ${{ github.workspace}}
      
      